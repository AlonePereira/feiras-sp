plugins {
	id 'org.springframework.boot' version '2.5.3'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'jacoco'
}

group = 'br.gov.sp.feiras'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
	mavenCentral()
}

sourceSets {
	integrationTest {
		compileClasspath += sourceSets.main.output + sourceSets.test.output
		runtimeClasspath += sourceSets.main.output + sourceSets.test.output

		java.srcDir 'src/integrationTest/java'
		resources.srcDir 'src/integrationTest/resources'
	}
}

configurations {
	integrationTestCompile.extendsFrom testCompile
	integrationTestRuntime.extendsFrom testRuntime
	integrationTestImplementation.extendsFrom testImplementation
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.mapstruct:mapstruct:1.4.2.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'
	runtimeOnly 'mysql:mysql-connector-java'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	integrationTestCompile 'org.springframework.boot:spring-boot-starter-test'
	integrationTestRuntimeOnly 'org.springframework.boot:spring-boot-starter-test'
	integrationTestRuntimeOnly 'com.h2database:h2'
}

test {
	useJUnitPlatform()
}

task integrationTest(type: Test) {
	description = 'Runs the integration tests.'
	group = "verification"

	testClassesDirs = sourceSets.integrationTest.output.classesDirs
	classpath = sourceSets.integrationTest.runtimeClasspath
	outputs.upToDateWhen { false }
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

rootProject.tasks.named("processIntegrationTestResources") {
	duplicatesStrategy = 'include'
}

jacocoTestReport {
	dependsOn integrationTest
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test

compileJava {
	options.compilerArgs += [
			'-Amapstruct.defaultComponentModel=spring',
			'-Amapstruct.defaultInjectionStrategy=constructor'
	]
}
